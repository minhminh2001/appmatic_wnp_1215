buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1+'
    }
}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
//apply plugin: 'newrelic'
apply plugin: "jacoco"
jacoco {
    toolVersion = "0.7.1.201405082137"
}
def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: ["testWnpDebugUnitTest"]) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebug.exec')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}
repositories {
    maven { url 'https://maven.fabric.io/public' }
}
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude '.readme'
    }

    testOptions {
        unitTests.all {
            setIgnoreFailures(true)
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.android.support:support-annotations:23.0.1'
    }

    defaultConfig {
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    dexOptions {
        preDexLibraries = false
    }
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        applicationId rootProject.ext.android.applicationId
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    productFlavors {
        wnp {

        }
        whitelabel {

        }
        evisu {

        }
    }
    signingConfigs {
        sign
    }
    buildTypes {
        release {
            signingConfig signingConfigs.sign
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main { jniLibs.srcDirs = ['libs'] }
    }
    lintOptions {
        abortOnError false
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
}
ext {
    SUPPORT_LIB_VERSION = '25.0.1'
    BUTTERKNIFE_VERSION = '8.4.0'
    PLAY_SERVICE_VERSION = '9.4.0'
    RETROFIT2_VERSION = '2.1.0'
    PERMISSION_VERSION = '2.3.1'
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':librarys:baseframework')
    compile "com.android.support:support-v4:${SUPPORT_LIB_VERSION}"
    compile "com.android.support:appcompat-v7:${SUPPORT_LIB_VERSION}"
    compile "com.android.support:design:${SUPPORT_LIB_VERSION}"
    compile "com.jakewharton:butterknife:${BUTTERKNIFE_VERSION}"
    compile "com.jakewharton:butterknife-compiler:${BUTTERKNIFE_VERSION}"
    compile "com.squareup.retrofit2:retrofit:${RETROFIT2_VERSION}"
    compile "com.squareup.retrofit2:converter-gson:${RETROFIT2_VERSION}"
    compile "com.squareup.retrofit2:adapter-rxjava:${RETROFIT2_VERSION}"
    compile "com.github.hotchemi:permissionsdispatcher:${PERMISSION_VERSION}"
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:${PERMISSION_VERSION}"
    compile "com.google.android.gms:play-services-gcm:${PLAY_SERVICE_VERSION}"
    compile "com.google.android.gms:play-services-analytics:${PLAY_SERVICE_VERSION}"
//    compile "com.google.android.gms:play-services-auth:${PLAY_SERVICE_VERSION}"
    compile "com.google.firebase:firebase-core:${PLAY_SERVICE_VERSION}"
    compile "com.squareup.okhttp3:okhttp-urlconnection:3.5.0"
    compile "org.apache.httpcomponents:httpcore:4.4.4"
    compile "com.squareup.okio:okio:1.11.0"
    compile "com.github.bumptech.glide:glide:3.7.0"
    compile "com.github.bumptech.glide:okhttp3-integration:1.4.0@aar"
    compile "com.facebook.android:facebook-android-sdk:4.17.0"
    compile "com.molpay:molpay-mobile-xdk-android:3.3.0"
    compile "io.reactivex:rxjava:1.1.6"
    compile "io.reactivex:rxandroid:1.2.1"
    compile "com.squareup.okhttp3:logging-interceptor:3.5.0"
    compile 'com.android.support:multidex:1.0.0'
    compile 'com.paypal.sdk:paypal-android-sdk:2.15.3'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile 'com.newrelic.agent.android:android-agent:5.+'
    //Test framework
    testCompile "org.robolectric:robolectric:3.0"
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile "org.powermock:powermock-module-junit4:1.6.2"
    testCompile "org.powermock:powermock-module-junit4-rule:1.6.2"
    testCompile "org.powermock:powermock-api-mockito:1.6.2"
    androidTestCompile 'com.android.support.test:runner:0.4'
    // Set this dependency to use JUnit 4 rules
    androidTestCompile 'com.android.support.test:rules:0.4'
    // Set this dependency to build and run Espresso tests
//    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    // Set this dependency to build and run UI Automator tests
//    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    compile 'com.android.support:support-v4:25.3.1'
//    compile 'com.android.support.constraint:constraint-layout:1.0.2'
//    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'
//    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
//    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
}
//    compile('com.crashlytics.sdk.android:crashlytics:2.6.2@aar') {
//        transitive = true;
//    }
//    debugCompile rootProject.ext.dependencies["leak_canary_bug"]
//    releaseCompile  rootProject.ext.dependencies["leak_canary_release"]
//    testCompile rootProject.ext.dependencies["leak_canary_test"]


afterEvaluate {
    tasks.matching {
        it.name.startsWith('dex')
    }.each { dx ->
        if (dx.additionalParameters == null) {
            dx.additionalParameters = []
        }
        dx.additionalParameters += '--multi-dex'
        dx.additionalParameters += "--main-dex-mAddressBook=$projectDir/multidex.keep".toString()
        dx.additionalParameters += '--minimal-main-dex'
    }
}

//println "config code: ${calculateVersionCode()}, name: ${calculateVersionName()}"

def ksFile = rootProject.file('keystore.properties')
def props = new Properties();
if (ksFile.canRead()) {
    props.load(new FileInputStream(ksFile))
    if (props != null) {
        android.signingConfigs.sign.storeFile file(props['KEYSTORE_FILE'])
        android.signingConfigs.sign.storePassword props['KEYSTORE_PASSWORD']
        android.signingConfigs.sign.keyAlias props['KEYSTORE_ALIAS']
        android.signingConfigs.sign.keyPassword props['KEYSTORE_ALIAS_PASSWORD']
    } else {
        println 'some entries in \'keystore.properties\' not found!'
    }
} else {
    println '\'keystore.properties\' not found!'
}

